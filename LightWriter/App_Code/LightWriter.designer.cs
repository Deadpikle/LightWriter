#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightWriter.App_Code
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LightWriterData")]
	public partial class LightWriterDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertAlgorithm(Algorithm instance);
    partial void UpdateAlgorithm(Algorithm instance);
    partial void DeleteAlgorithm(Algorithm instance);
    partial void InsertSingleBlock(SingleBlock instance);
    partial void UpdateSingleBlock(SingleBlock instance);
    partial void DeleteSingleBlock(SingleBlock instance);
    partial void InsertComparisonBlock(ComparisonBlock instance);
    partial void UpdateComparisonBlock(ComparisonBlock instance);
    partial void DeleteComparisonBlock(ComparisonBlock instance);
    partial void InsertCircleBlock(CircleBlock instance);
    partial void UpdateCircleBlock(CircleBlock instance);
    partial void DeleteCircleBlock(CircleBlock instance);
    partial void InsertSingleMoveBlock(SingleMoveBlock instance);
    partial void UpdateSingleMoveBlock(SingleMoveBlock instance);
    partial void DeleteSingleMoveBlock(SingleMoveBlock instance);
    partial void InsertComparisonMoveBlock(ComparisonMoveBlock instance);
    partial void UpdateComparisonMoveBlock(ComparisonMoveBlock instance);
    partial void DeleteComparisonMoveBlock(ComparisonMoveBlock instance);
    partial void InsertRangeBlock(RangeBlock instance);
    partial void UpdateRangeBlock(RangeBlock instance);
    partial void DeleteRangeBlock(RangeBlock instance);
    partial void InsertRangeMoveBlock(RangeMoveBlock instance);
    partial void UpdateRangeMoveBlock(RangeMoveBlock instance);
    partial void DeleteRangeMoveBlock(RangeMoveBlock instance);
    partial void InsertRule(Rule instance);
    partial void UpdateRule(Rule instance);
    partial void DeleteRule(Rule instance);
    partial void InsertCommentBlock(CommentBlock instance);
    partial void UpdateCommentBlock(CommentBlock instance);
    partial void DeleteCommentBlock(CommentBlock instance);
    #endregion
		
		public LightWriterDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["LightWriterDataConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LightWriterDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LightWriterDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LightWriterDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LightWriterDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Algorithm> Algorithms
		{
			get
			{
				return this.GetTable<Algorithm>();
			}
		}
		
		public System.Data.Linq.Table<SingleBlock> SingleBlocks
		{
			get
			{
				return this.GetTable<SingleBlock>();
			}
		}
		
		public System.Data.Linq.Table<ComparisonBlock> ComparisonBlocks
		{
			get
			{
				return this.GetTable<ComparisonBlock>();
			}
		}
		
		public System.Data.Linq.Table<CircleBlock> CircleBlocks
		{
			get
			{
				return this.GetTable<CircleBlock>();
			}
		}
		
		public System.Data.Linq.Table<SingleMoveBlock> SingleMoveBlocks
		{
			get
			{
				return this.GetTable<SingleMoveBlock>();
			}
		}
		
		public System.Data.Linq.Table<ComparisonMoveBlock> ComparisonMoveBlocks
		{
			get
			{
				return this.GetTable<ComparisonMoveBlock>();
			}
		}
		
		public System.Data.Linq.Table<RangeBlock> RangeBlocks
		{
			get
			{
				return this.GetTable<RangeBlock>();
			}
		}
		
		public System.Data.Linq.Table<RangeMoveBlock> RangeMoveBlocks
		{
			get
			{
				return this.GetTable<RangeMoveBlock>();
			}
		}
		
		public System.Data.Linq.Table<Rule> Rules
		{
			get
			{
				return this.GetTable<Rule>();
			}
		}
		
		public System.Data.Linq.Table<CommentBlock> CommentBlocks
		{
			get
			{
				return this.GetTable<CommentBlock>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Username;
		
		private string _Password;
		
		private EntitySet<Algorithm> _Algorithms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public User()
		{
			this._Algorithms = new EntitySet<Algorithm>(new Action<Algorithm>(this.attach_Algorithms), new Action<Algorithm>(this.detach_Algorithms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Algorithm", Storage="_Algorithms", ThisKey="ID", OtherKey="UserID")]
		internal EntitySet<Algorithm> Algorithms
		{
			get
			{
				return this._Algorithms;
			}
			set
			{
				this._Algorithms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Algorithms(Algorithm entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Algorithms(Algorithm entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Algorithms")]
	public partial class Algorithm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private System.DateTime _DateCreated;
		
		private string _Name;
		
		private EntitySet<SingleBlock> _SingleBlocks;
		
		private EntitySet<ComparisonBlock> _ComparisonBlocks;
		
		private EntitySet<CircleBlock> _CircleBlocks;
		
		private EntitySet<SingleMoveBlock> _SingleMoveBlocks;
		
		private EntitySet<ComparisonMoveBlock> _ComparisonMoveBlocks;
		
		private EntitySet<RangeBlock> _RangeBlocks;
		
		private EntitySet<RangeMoveBlock> _RangeMoveBlocks;
		
		private EntitySet<Rule> _Rules;
		
		private EntitySet<CommentBlock> _CommentBlocks;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Algorithm()
		{
			this._SingleBlocks = new EntitySet<SingleBlock>(new Action<SingleBlock>(this.attach_SingleBlocks), new Action<SingleBlock>(this.detach_SingleBlocks));
			this._ComparisonBlocks = new EntitySet<ComparisonBlock>(new Action<ComparisonBlock>(this.attach_ComparisonBlocks), new Action<ComparisonBlock>(this.detach_ComparisonBlocks));
			this._CircleBlocks = new EntitySet<CircleBlock>(new Action<CircleBlock>(this.attach_CircleBlocks), new Action<CircleBlock>(this.detach_CircleBlocks));
			this._SingleMoveBlocks = new EntitySet<SingleMoveBlock>(new Action<SingleMoveBlock>(this.attach_SingleMoveBlocks), new Action<SingleMoveBlock>(this.detach_SingleMoveBlocks));
			this._ComparisonMoveBlocks = new EntitySet<ComparisonMoveBlock>(new Action<ComparisonMoveBlock>(this.attach_ComparisonMoveBlocks), new Action<ComparisonMoveBlock>(this.detach_ComparisonMoveBlocks));
			this._RangeBlocks = new EntitySet<RangeBlock>(new Action<RangeBlock>(this.attach_RangeBlocks), new Action<RangeBlock>(this.detach_RangeBlocks));
			this._RangeMoveBlocks = new EntitySet<RangeMoveBlock>(new Action<RangeMoveBlock>(this.attach_RangeMoveBlocks), new Action<RangeMoveBlock>(this.detach_RangeMoveBlocks));
			this._Rules = new EntitySet<Rule>(new Action<Rule>(this.attach_Rules), new Action<Rule>(this.detach_Rules));
			this._CommentBlocks = new EntitySet<CommentBlock>(new Action<CommentBlock>(this.attach_CommentBlocks), new Action<CommentBlock>(this.detach_CommentBlocks));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="Date NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Algorithm_SingleBlock", Storage="_SingleBlocks", ThisKey="ID", OtherKey="AlgorithmID")]
		internal EntitySet<SingleBlock> SingleBlocks
		{
			get
			{
				return this._SingleBlocks;
			}
			set
			{
				this._SingleBlocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Algorithm_ComparisonBlock", Storage="_ComparisonBlocks", ThisKey="ID", OtherKey="AlgorithmID")]
		internal EntitySet<ComparisonBlock> ComparisonBlocks
		{
			get
			{
				return this._ComparisonBlocks;
			}
			set
			{
				this._ComparisonBlocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Algorithm_CircleBlock", Storage="_CircleBlocks", ThisKey="ID", OtherKey="AlgorithmID")]
		internal EntitySet<CircleBlock> CircleBlocks
		{
			get
			{
				return this._CircleBlocks;
			}
			set
			{
				this._CircleBlocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Algorithm_SingleMoveBlock", Storage="_SingleMoveBlocks", ThisKey="ID", OtherKey="AlgorithmID")]
		internal EntitySet<SingleMoveBlock> SingleMoveBlocks
		{
			get
			{
				return this._SingleMoveBlocks;
			}
			set
			{
				this._SingleMoveBlocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Algorithm_ComparisonMoveBlock", Storage="_ComparisonMoveBlocks", ThisKey="ID", OtherKey="AlgorithmID")]
		internal EntitySet<ComparisonMoveBlock> ComparisonMoveBlocks
		{
			get
			{
				return this._ComparisonMoveBlocks;
			}
			set
			{
				this._ComparisonMoveBlocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Algorithm_RangeBlock", Storage="_RangeBlocks", ThisKey="ID", OtherKey="AlgorithmID")]
		internal EntitySet<RangeBlock> RangeBlocks
		{
			get
			{
				return this._RangeBlocks;
			}
			set
			{
				this._RangeBlocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Algorithm_RangeMoveBlock", Storage="_RangeMoveBlocks", ThisKey="ID", OtherKey="AlgorithmID")]
		internal EntitySet<RangeMoveBlock> RangeMoveBlocks
		{
			get
			{
				return this._RangeMoveBlocks;
			}
			set
			{
				this._RangeMoveBlocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Algorithm_Rule", Storage="_Rules", ThisKey="ID", OtherKey="AlgorithmID")]
		internal EntitySet<Rule> Rules
		{
			get
			{
				return this._Rules;
			}
			set
			{
				this._Rules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Algorithm_CommentBlock", Storage="_CommentBlocks", ThisKey="ID", OtherKey="AlgorithmID")]
		internal EntitySet<CommentBlock> CommentBlocks
		{
			get
			{
				return this._CommentBlocks;
			}
			set
			{
				this._CommentBlocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Algorithm", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Algorithms.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Algorithms.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SingleBlocks(SingleBlock entity)
		{
			this.SendPropertyChanging();
			entity.Algorithm = this;
		}
		
		private void detach_SingleBlocks(SingleBlock entity)
		{
			this.SendPropertyChanging();
			entity.Algorithm = null;
		}
		
		private void attach_ComparisonBlocks(ComparisonBlock entity)
		{
			this.SendPropertyChanging();
			entity.Algorithm = this;
		}
		
		private void detach_ComparisonBlocks(ComparisonBlock entity)
		{
			this.SendPropertyChanging();
			entity.Algorithm = null;
		}
		
		private void attach_CircleBlocks(CircleBlock entity)
		{
			this.SendPropertyChanging();
			entity.Algorithm = this;
		}
		
		private void detach_CircleBlocks(CircleBlock entity)
		{
			this.SendPropertyChanging();
			entity.Algorithm = null;
		}
		
		private void attach_SingleMoveBlocks(SingleMoveBlock entity)
		{
			this.SendPropertyChanging();
			entity.Algorithm = this;
		}
		
		private void detach_SingleMoveBlocks(SingleMoveBlock entity)
		{
			this.SendPropertyChanging();
			entity.Algorithm = null;
		}
		
		private void attach_ComparisonMoveBlocks(ComparisonMoveBlock entity)
		{
			this.SendPropertyChanging();
			entity.Algorithm = this;
		}
		
		private void detach_ComparisonMoveBlocks(ComparisonMoveBlock entity)
		{
			this.SendPropertyChanging();
			entity.Algorithm = null;
		}
		
		private void attach_RangeBlocks(RangeBlock entity)
		{
			this.SendPropertyChanging();
			entity.Algorithm = this;
		}
		
		private void detach_RangeBlocks(RangeBlock entity)
		{
			this.SendPropertyChanging();
			entity.Algorithm = null;
		}
		
		private void attach_RangeMoveBlocks(RangeMoveBlock entity)
		{
			this.SendPropertyChanging();
			entity.Algorithm = this;
		}
		
		private void detach_RangeMoveBlocks(RangeMoveBlock entity)
		{
			this.SendPropertyChanging();
			entity.Algorithm = null;
		}
		
		private void attach_Rules(Rule entity)
		{
			this.SendPropertyChanging();
			entity.Algorithm = this;
		}
		
		private void detach_Rules(Rule entity)
		{
			this.SendPropertyChanging();
			entity.Algorithm = null;
		}
		
		private void attach_CommentBlocks(CommentBlock entity)
		{
			this.SendPropertyChanging();
			entity.Algorithm = this;
		}
		
		private void detach_CommentBlocks(CommentBlock entity)
		{
			this.SendPropertyChanging();
			entity.Algorithm = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SingleBlock")]
	public partial class SingleBlock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AlgorithmID;
		
		private string _RowID;
		
		private string _ColumnID;
		
		private string _ActionString;
		
		private int _Position;
		
		private string _SetToColor;
		
		private EntityRef<Algorithm> _Algorithm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAlgorithmIDChanging(int value);
    partial void OnAlgorithmIDChanged();
    partial void OnRowIDChanging(string value);
    partial void OnRowIDChanged();
    partial void OnColumnIDChanging(string value);
    partial void OnColumnIDChanged();
    partial void OnActionStringChanging(string value);
    partial void OnActionStringChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnSetToColorChanging(string value);
    partial void OnSetToColorChanged();
    #endregion
		
		public SingleBlock()
		{
			this._Algorithm = default(EntityRef<Algorithm>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlgorithmID", DbType="Int NOT NULL")]
		public int AlgorithmID
		{
			get
			{
				return this._AlgorithmID;
			}
			set
			{
				if ((this._AlgorithmID != value))
				{
					if (this._Algorithm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlgorithmIDChanging(value);
					this.SendPropertyChanging();
					this._AlgorithmID = value;
					this.SendPropertyChanged("AlgorithmID");
					this.OnAlgorithmIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowID", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					this.OnRowIDChanging(value);
					this.SendPropertyChanging();
					this._RowID = value;
					this.SendPropertyChanged("RowID");
					this.OnRowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColumnID", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string ColumnID
		{
			get
			{
				return this._ColumnID;
			}
			set
			{
				if ((this._ColumnID != value))
				{
					this.OnColumnIDChanging(value);
					this.SendPropertyChanging();
					this._ColumnID = value;
					this.SendPropertyChanged("ColumnID");
					this.OnColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionString", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ActionString
		{
			get
			{
				return this._ActionString;
			}
			set
			{
				if ((this._ActionString != value))
				{
					this.OnActionStringChanging(value);
					this.SendPropertyChanging();
					this._ActionString = value;
					this.SendPropertyChanged("ActionString");
					this.OnActionStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SetToColor", DbType="VarChar(10)")]
		public string SetToColor
		{
			get
			{
				return this._SetToColor;
			}
			set
			{
				if ((this._SetToColor != value))
				{
					this.OnSetToColorChanging(value);
					this.SendPropertyChanging();
					this._SetToColor = value;
					this.SendPropertyChanged("SetToColor");
					this.OnSetToColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Algorithm_SingleBlock", Storage="_Algorithm", ThisKey="AlgorithmID", OtherKey="ID", IsForeignKey=true)]
		public Algorithm Algorithm
		{
			get
			{
				return this._Algorithm.Entity;
			}
			set
			{
				Algorithm previousValue = this._Algorithm.Entity;
				if (((previousValue != value) 
							|| (this._Algorithm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Algorithm.Entity = null;
						previousValue.SingleBlocks.Remove(this);
					}
					this._Algorithm.Entity = value;
					if ((value != null))
					{
						value.SingleBlocks.Add(this);
						this._AlgorithmID = value.ID;
					}
					else
					{
						this._AlgorithmID = default(int);
					}
					this.SendPropertyChanged("Algorithm");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ComparisonBlock")]
	public partial class ComparisonBlock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AlgorithmID;
		
		private string _ComparisonActionString;
		
		private string _RowOrColumnID;
		
		private string _ActionString;
		
		private int _Position;
		
		private string _SetToColor;
		
		private EntityRef<Algorithm> _Algorithm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAlgorithmIDChanging(int value);
    partial void OnAlgorithmIDChanged();
    partial void OnComparisonActionStringChanging(string value);
    partial void OnComparisonActionStringChanged();
    partial void OnRowOrColumnIDChanging(string value);
    partial void OnRowOrColumnIDChanged();
    partial void OnActionStringChanging(string value);
    partial void OnActionStringChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnSetToColorChanging(string value);
    partial void OnSetToColorChanged();
    #endregion
		
		public ComparisonBlock()
		{
			this._Algorithm = default(EntityRef<Algorithm>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlgorithmID", DbType="Int NOT NULL")]
		public int AlgorithmID
		{
			get
			{
				return this._AlgorithmID;
			}
			set
			{
				if ((this._AlgorithmID != value))
				{
					if (this._Algorithm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlgorithmIDChanging(value);
					this.SendPropertyChanging();
					this._AlgorithmID = value;
					this.SendPropertyChanged("AlgorithmID");
					this.OnAlgorithmIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComparisonActionString", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ComparisonActionString
		{
			get
			{
				return this._ComparisonActionString;
			}
			set
			{
				if ((this._ComparisonActionString != value))
				{
					this.OnComparisonActionStringChanging(value);
					this.SendPropertyChanging();
					this._ComparisonActionString = value;
					this.SendPropertyChanged("ComparisonActionString");
					this.OnComparisonActionStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowOrColumnID", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string RowOrColumnID
		{
			get
			{
				return this._RowOrColumnID;
			}
			set
			{
				if ((this._RowOrColumnID != value))
				{
					this.OnRowOrColumnIDChanging(value);
					this.SendPropertyChanging();
					this._RowOrColumnID = value;
					this.SendPropertyChanged("RowOrColumnID");
					this.OnRowOrColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionString", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ActionString
		{
			get
			{
				return this._ActionString;
			}
			set
			{
				if ((this._ActionString != value))
				{
					this.OnActionStringChanging(value);
					this.SendPropertyChanging();
					this._ActionString = value;
					this.SendPropertyChanged("ActionString");
					this.OnActionStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SetToColor", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string SetToColor
		{
			get
			{
				return this._SetToColor;
			}
			set
			{
				if ((this._SetToColor != value))
				{
					this.OnSetToColorChanging(value);
					this.SendPropertyChanging();
					this._SetToColor = value;
					this.SendPropertyChanged("SetToColor");
					this.OnSetToColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Algorithm_ComparisonBlock", Storage="_Algorithm", ThisKey="AlgorithmID", OtherKey="ID", IsForeignKey=true)]
		public Algorithm Algorithm
		{
			get
			{
				return this._Algorithm.Entity;
			}
			set
			{
				Algorithm previousValue = this._Algorithm.Entity;
				if (((previousValue != value) 
							|| (this._Algorithm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Algorithm.Entity = null;
						previousValue.ComparisonBlocks.Remove(this);
					}
					this._Algorithm.Entity = value;
					if ((value != null))
					{
						value.ComparisonBlocks.Add(this);
						this._AlgorithmID = value.ID;
					}
					else
					{
						this._AlgorithmID = default(int);
					}
					this.SendPropertyChanged("Algorithm");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CircleBlock")]
	public partial class CircleBlock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AlgorithmID;
		
		private int _Position;
		
		private string _SetToColor;
		
		private string _ActionString;
		
		private string _RowID;
		
		private string _ColumnID;
		
		private int _Radius;
		
		private EntityRef<Algorithm> _Algorithm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAlgorithmIDChanging(int value);
    partial void OnAlgorithmIDChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnSetToColorChanging(string value);
    partial void OnSetToColorChanged();
    partial void OnActionStringChanging(string value);
    partial void OnActionStringChanged();
    partial void OnRowIDChanging(string value);
    partial void OnRowIDChanged();
    partial void OnColumnIDChanging(string value);
    partial void OnColumnIDChanged();
    partial void OnRadiusChanging(int value);
    partial void OnRadiusChanged();
    #endregion
		
		public CircleBlock()
		{
			this._Algorithm = default(EntityRef<Algorithm>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlgorithmID", DbType="Int NOT NULL")]
		public int AlgorithmID
		{
			get
			{
				return this._AlgorithmID;
			}
			set
			{
				if ((this._AlgorithmID != value))
				{
					if (this._Algorithm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlgorithmIDChanging(value);
					this.SendPropertyChanging();
					this._AlgorithmID = value;
					this.SendPropertyChanged("AlgorithmID");
					this.OnAlgorithmIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SetToColor", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string SetToColor
		{
			get
			{
				return this._SetToColor;
			}
			set
			{
				if ((this._SetToColor != value))
				{
					this.OnSetToColorChanging(value);
					this.SendPropertyChanging();
					this._SetToColor = value;
					this.SendPropertyChanged("SetToColor");
					this.OnSetToColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionString", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string ActionString
		{
			get
			{
				return this._ActionString;
			}
			set
			{
				if ((this._ActionString != value))
				{
					this.OnActionStringChanging(value);
					this.SendPropertyChanging();
					this._ActionString = value;
					this.SendPropertyChanged("ActionString");
					this.OnActionStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowID", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					this.OnRowIDChanging(value);
					this.SendPropertyChanging();
					this._RowID = value;
					this.SendPropertyChanged("RowID");
					this.OnRowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColumnID", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string ColumnID
		{
			get
			{
				return this._ColumnID;
			}
			set
			{
				if ((this._ColumnID != value))
				{
					this.OnColumnIDChanging(value);
					this.SendPropertyChanging();
					this._ColumnID = value;
					this.SendPropertyChanged("ColumnID");
					this.OnColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Radius", DbType="Int NOT NULL")]
		public int Radius
		{
			get
			{
				return this._Radius;
			}
			set
			{
				if ((this._Radius != value))
				{
					this.OnRadiusChanging(value);
					this.SendPropertyChanging();
					this._Radius = value;
					this.SendPropertyChanged("Radius");
					this.OnRadiusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Algorithm_CircleBlock", Storage="_Algorithm", ThisKey="AlgorithmID", OtherKey="ID", IsForeignKey=true)]
		public Algorithm Algorithm
		{
			get
			{
				return this._Algorithm.Entity;
			}
			set
			{
				Algorithm previousValue = this._Algorithm.Entity;
				if (((previousValue != value) 
							|| (this._Algorithm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Algorithm.Entity = null;
						previousValue.CircleBlocks.Remove(this);
					}
					this._Algorithm.Entity = value;
					if ((value != null))
					{
						value.CircleBlocks.Add(this);
						this._AlgorithmID = value.ID;
					}
					else
					{
						this._AlgorithmID = default(int);
					}
					this.SendPropertyChanged("Algorithm");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SingleMoveBlock")]
	public partial class SingleMoveBlock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AlgorithmID;
		
		private string _RowID;
		
		private string _ColumnID;
		
		private string _ActionString;
		
		private int _Position;
		
		private string _SetToColor;
		
		private string _Direction;
		
		private int _NumberBlocksToMove;
		
		private int _NumberTicksBeforeChange;
		
		private EntityRef<Algorithm> _Algorithm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAlgorithmIDChanging(int value);
    partial void OnAlgorithmIDChanged();
    partial void OnRowIDChanging(string value);
    partial void OnRowIDChanged();
    partial void OnColumnIDChanging(string value);
    partial void OnColumnIDChanged();
    partial void OnActionStringChanging(string value);
    partial void OnActionStringChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnSetToColorChanging(string value);
    partial void OnSetToColorChanged();
    partial void OnDirectionChanging(string value);
    partial void OnDirectionChanged();
    partial void OnNumberBlocksToMoveChanging(int value);
    partial void OnNumberBlocksToMoveChanged();
    partial void OnNumberTicksBeforeChangeChanging(int value);
    partial void OnNumberTicksBeforeChangeChanged();
    #endregion
		
		public SingleMoveBlock()
		{
			this._Algorithm = default(EntityRef<Algorithm>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlgorithmID", DbType="Int NOT NULL")]
		public int AlgorithmID
		{
			get
			{
				return this._AlgorithmID;
			}
			set
			{
				if ((this._AlgorithmID != value))
				{
					if (this._Algorithm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlgorithmIDChanging(value);
					this.SendPropertyChanging();
					this._AlgorithmID = value;
					this.SendPropertyChanged("AlgorithmID");
					this.OnAlgorithmIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowID", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					this.OnRowIDChanging(value);
					this.SendPropertyChanging();
					this._RowID = value;
					this.SendPropertyChanged("RowID");
					this.OnRowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColumnID", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string ColumnID
		{
			get
			{
				return this._ColumnID;
			}
			set
			{
				if ((this._ColumnID != value))
				{
					this.OnColumnIDChanging(value);
					this.SendPropertyChanging();
					this._ColumnID = value;
					this.SendPropertyChanged("ColumnID");
					this.OnColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionString", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ActionString
		{
			get
			{
				return this._ActionString;
			}
			set
			{
				if ((this._ActionString != value))
				{
					this.OnActionStringChanging(value);
					this.SendPropertyChanging();
					this._ActionString = value;
					this.SendPropertyChanged("ActionString");
					this.OnActionStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SetToColor", DbType="VarChar(10)")]
		public string SetToColor
		{
			get
			{
				return this._SetToColor;
			}
			set
			{
				if ((this._SetToColor != value))
				{
					this.OnSetToColorChanging(value);
					this.SendPropertyChanging();
					this._SetToColor = value;
					this.SendPropertyChanged("SetToColor");
					this.OnSetToColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Direction", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Direction
		{
			get
			{
				return this._Direction;
			}
			set
			{
				if ((this._Direction != value))
				{
					this.OnDirectionChanging(value);
					this.SendPropertyChanging();
					this._Direction = value;
					this.SendPropertyChanged("Direction");
					this.OnDirectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberBlocksToMove", DbType="Int NOT NULL")]
		public int NumberBlocksToMove
		{
			get
			{
				return this._NumberBlocksToMove;
			}
			set
			{
				if ((this._NumberBlocksToMove != value))
				{
					this.OnNumberBlocksToMoveChanging(value);
					this.SendPropertyChanging();
					this._NumberBlocksToMove = value;
					this.SendPropertyChanged("NumberBlocksToMove");
					this.OnNumberBlocksToMoveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberTicksBeforeChange", DbType="Int NOT NULL")]
		public int NumberTicksBeforeChange
		{
			get
			{
				return this._NumberTicksBeforeChange;
			}
			set
			{
				if ((this._NumberTicksBeforeChange != value))
				{
					this.OnNumberTicksBeforeChangeChanging(value);
					this.SendPropertyChanging();
					this._NumberTicksBeforeChange = value;
					this.SendPropertyChanged("NumberTicksBeforeChange");
					this.OnNumberTicksBeforeChangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Algorithm_SingleMoveBlock", Storage="_Algorithm", ThisKey="AlgorithmID", OtherKey="ID", IsForeignKey=true)]
		public Algorithm Algorithm
		{
			get
			{
				return this._Algorithm.Entity;
			}
			set
			{
				Algorithm previousValue = this._Algorithm.Entity;
				if (((previousValue != value) 
							|| (this._Algorithm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Algorithm.Entity = null;
						previousValue.SingleMoveBlocks.Remove(this);
					}
					this._Algorithm.Entity = value;
					if ((value != null))
					{
						value.SingleMoveBlocks.Add(this);
						this._AlgorithmID = value.ID;
					}
					else
					{
						this._AlgorithmID = default(int);
					}
					this.SendPropertyChanged("Algorithm");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ComparisonMoveBlock")]
	public partial class ComparisonMoveBlock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AlgorithmID;
		
		private string _RowOrColumnID;
		
		private string _ActionString;
		
		private int _Position;
		
		private string _SetToColor;
		
		private string _Direction;
		
		private int _NumberBlocksToMove;
		
		private int _NumberTicksBeforeChange;
		
		private string _ComparisonActionString;
		
		private EntityRef<Algorithm> _Algorithm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAlgorithmIDChanging(int value);
    partial void OnAlgorithmIDChanged();
    partial void OnRowOrColumnIDChanging(string value);
    partial void OnRowOrColumnIDChanged();
    partial void OnActionStringChanging(string value);
    partial void OnActionStringChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnSetToColorChanging(string value);
    partial void OnSetToColorChanged();
    partial void OnDirectionChanging(string value);
    partial void OnDirectionChanged();
    partial void OnNumberBlocksToMoveChanging(int value);
    partial void OnNumberBlocksToMoveChanged();
    partial void OnNumberTicksBeforeChangeChanging(int value);
    partial void OnNumberTicksBeforeChangeChanged();
    partial void OnComparisonActionStringChanging(string value);
    partial void OnComparisonActionStringChanged();
    #endregion
		
		public ComparisonMoveBlock()
		{
			this._Algorithm = default(EntityRef<Algorithm>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlgorithmID", DbType="Int NOT NULL")]
		public int AlgorithmID
		{
			get
			{
				return this._AlgorithmID;
			}
			set
			{
				if ((this._AlgorithmID != value))
				{
					if (this._Algorithm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlgorithmIDChanging(value);
					this.SendPropertyChanging();
					this._AlgorithmID = value;
					this.SendPropertyChanged("AlgorithmID");
					this.OnAlgorithmIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowOrColumnID", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string RowOrColumnID
		{
			get
			{
				return this._RowOrColumnID;
			}
			set
			{
				if ((this._RowOrColumnID != value))
				{
					this.OnRowOrColumnIDChanging(value);
					this.SendPropertyChanging();
					this._RowOrColumnID = value;
					this.SendPropertyChanged("RowOrColumnID");
					this.OnRowOrColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionString", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ActionString
		{
			get
			{
				return this._ActionString;
			}
			set
			{
				if ((this._ActionString != value))
				{
					this.OnActionStringChanging(value);
					this.SendPropertyChanging();
					this._ActionString = value;
					this.SendPropertyChanged("ActionString");
					this.OnActionStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SetToColor", DbType="VarChar(10)")]
		public string SetToColor
		{
			get
			{
				return this._SetToColor;
			}
			set
			{
				if ((this._SetToColor != value))
				{
					this.OnSetToColorChanging(value);
					this.SendPropertyChanging();
					this._SetToColor = value;
					this.SendPropertyChanged("SetToColor");
					this.OnSetToColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Direction", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string Direction
		{
			get
			{
				return this._Direction;
			}
			set
			{
				if ((this._Direction != value))
				{
					this.OnDirectionChanging(value);
					this.SendPropertyChanging();
					this._Direction = value;
					this.SendPropertyChanged("Direction");
					this.OnDirectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberBlocksToMove", DbType="Int NOT NULL")]
		public int NumberBlocksToMove
		{
			get
			{
				return this._NumberBlocksToMove;
			}
			set
			{
				if ((this._NumberBlocksToMove != value))
				{
					this.OnNumberBlocksToMoveChanging(value);
					this.SendPropertyChanging();
					this._NumberBlocksToMove = value;
					this.SendPropertyChanged("NumberBlocksToMove");
					this.OnNumberBlocksToMoveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberTicksBeforeChange", DbType="Int NOT NULL")]
		public int NumberTicksBeforeChange
		{
			get
			{
				return this._NumberTicksBeforeChange;
			}
			set
			{
				if ((this._NumberTicksBeforeChange != value))
				{
					this.OnNumberTicksBeforeChangeChanging(value);
					this.SendPropertyChanging();
					this._NumberTicksBeforeChange = value;
					this.SendPropertyChanged("NumberTicksBeforeChange");
					this.OnNumberTicksBeforeChangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComparisonActionString", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ComparisonActionString
		{
			get
			{
				return this._ComparisonActionString;
			}
			set
			{
				if ((this._ComparisonActionString != value))
				{
					this.OnComparisonActionStringChanging(value);
					this.SendPropertyChanging();
					this._ComparisonActionString = value;
					this.SendPropertyChanged("ComparisonActionString");
					this.OnComparisonActionStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Algorithm_ComparisonMoveBlock", Storage="_Algorithm", ThisKey="AlgorithmID", OtherKey="ID", IsForeignKey=true)]
		public Algorithm Algorithm
		{
			get
			{
				return this._Algorithm.Entity;
			}
			set
			{
				Algorithm previousValue = this._Algorithm.Entity;
				if (((previousValue != value) 
							|| (this._Algorithm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Algorithm.Entity = null;
						previousValue.ComparisonMoveBlocks.Remove(this);
					}
					this._Algorithm.Entity = value;
					if ((value != null))
					{
						value.ComparisonMoveBlocks.Add(this);
						this._AlgorithmID = value.ID;
					}
					else
					{
						this._AlgorithmID = default(int);
					}
					this.SendPropertyChanged("Algorithm");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RangeBlock")]
	public partial class RangeBlock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AlgorithmID;
		
		private string _ActionString;
		
		private int _Position;
		
		private string _SetToColor;
		
		private string _LeftRowOrColumnID;
		
		private string _RightRowOrColumnID;
		
		private EntityRef<Algorithm> _Algorithm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAlgorithmIDChanging(int value);
    partial void OnAlgorithmIDChanged();
    partial void OnActionStringChanging(string value);
    partial void OnActionStringChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnSetToColorChanging(string value);
    partial void OnSetToColorChanged();
    partial void OnLeftRowOrColumnIDChanging(string value);
    partial void OnLeftRowOrColumnIDChanged();
    partial void OnRightRowOrColumnIDChanging(string value);
    partial void OnRightRowOrColumnIDChanged();
    #endregion
		
		public RangeBlock()
		{
			this._Algorithm = default(EntityRef<Algorithm>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlgorithmID", DbType="Int NOT NULL")]
		public int AlgorithmID
		{
			get
			{
				return this._AlgorithmID;
			}
			set
			{
				if ((this._AlgorithmID != value))
				{
					if (this._Algorithm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlgorithmIDChanging(value);
					this.SendPropertyChanging();
					this._AlgorithmID = value;
					this.SendPropertyChanged("AlgorithmID");
					this.OnAlgorithmIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionString", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ActionString
		{
			get
			{
				return this._ActionString;
			}
			set
			{
				if ((this._ActionString != value))
				{
					this.OnActionStringChanging(value);
					this.SendPropertyChanging();
					this._ActionString = value;
					this.SendPropertyChanged("ActionString");
					this.OnActionStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SetToColor", DbType="VarChar(10)")]
		public string SetToColor
		{
			get
			{
				return this._SetToColor;
			}
			set
			{
				if ((this._SetToColor != value))
				{
					this.OnSetToColorChanging(value);
					this.SendPropertyChanging();
					this._SetToColor = value;
					this.SendPropertyChanged("SetToColor");
					this.OnSetToColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeftRowOrColumnID", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string LeftRowOrColumnID
		{
			get
			{
				return this._LeftRowOrColumnID;
			}
			set
			{
				if ((this._LeftRowOrColumnID != value))
				{
					this.OnLeftRowOrColumnIDChanging(value);
					this.SendPropertyChanging();
					this._LeftRowOrColumnID = value;
					this.SendPropertyChanged("LeftRowOrColumnID");
					this.OnLeftRowOrColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RightRowOrColumnID", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string RightRowOrColumnID
		{
			get
			{
				return this._RightRowOrColumnID;
			}
			set
			{
				if ((this._RightRowOrColumnID != value))
				{
					this.OnRightRowOrColumnIDChanging(value);
					this.SendPropertyChanging();
					this._RightRowOrColumnID = value;
					this.SendPropertyChanged("RightRowOrColumnID");
					this.OnRightRowOrColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Algorithm_RangeBlock", Storage="_Algorithm", ThisKey="AlgorithmID", OtherKey="ID", IsForeignKey=true)]
		public Algorithm Algorithm
		{
			get
			{
				return this._Algorithm.Entity;
			}
			set
			{
				Algorithm previousValue = this._Algorithm.Entity;
				if (((previousValue != value) 
							|| (this._Algorithm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Algorithm.Entity = null;
						previousValue.RangeBlocks.Remove(this);
					}
					this._Algorithm.Entity = value;
					if ((value != null))
					{
						value.RangeBlocks.Add(this);
						this._AlgorithmID = value.ID;
					}
					else
					{
						this._AlgorithmID = default(int);
					}
					this.SendPropertyChanged("Algorithm");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RangeMoveBlock")]
	public partial class RangeMoveBlock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AlgorithmID;
		
		private string _ActionString;
		
		private int _Position;
		
		private string _SetToColor;
		
		private string _LeftRowOrColumnID;
		
		private string _RightRowOrColumnID;
		
		private string _Direction;
		
		private int _NumberBlocksToMove;
		
		private int _NumberTicksBeforeChange;
		
		private EntityRef<Algorithm> _Algorithm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAlgorithmIDChanging(int value);
    partial void OnAlgorithmIDChanged();
    partial void OnActionStringChanging(string value);
    partial void OnActionStringChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnSetToColorChanging(string value);
    partial void OnSetToColorChanged();
    partial void OnLeftRowOrColumnIDChanging(string value);
    partial void OnLeftRowOrColumnIDChanged();
    partial void OnRightRowOrColumnIDChanging(string value);
    partial void OnRightRowOrColumnIDChanged();
    partial void OnDirectionChanging(string value);
    partial void OnDirectionChanged();
    partial void OnNumberBlocksToMoveChanging(int value);
    partial void OnNumberBlocksToMoveChanged();
    partial void OnNumberTicksBeforeChangeChanging(int value);
    partial void OnNumberTicksBeforeChangeChanged();
    #endregion
		
		public RangeMoveBlock()
		{
			this._Algorithm = default(EntityRef<Algorithm>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlgorithmID", DbType="Int NOT NULL")]
		public int AlgorithmID
		{
			get
			{
				return this._AlgorithmID;
			}
			set
			{
				if ((this._AlgorithmID != value))
				{
					if (this._Algorithm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlgorithmIDChanging(value);
					this.SendPropertyChanging();
					this._AlgorithmID = value;
					this.SendPropertyChanged("AlgorithmID");
					this.OnAlgorithmIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionString", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ActionString
		{
			get
			{
				return this._ActionString;
			}
			set
			{
				if ((this._ActionString != value))
				{
					this.OnActionStringChanging(value);
					this.SendPropertyChanging();
					this._ActionString = value;
					this.SendPropertyChanged("ActionString");
					this.OnActionStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SetToColor", DbType="VarChar(10)")]
		public string SetToColor
		{
			get
			{
				return this._SetToColor;
			}
			set
			{
				if ((this._SetToColor != value))
				{
					this.OnSetToColorChanging(value);
					this.SendPropertyChanging();
					this._SetToColor = value;
					this.SendPropertyChanged("SetToColor");
					this.OnSetToColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeftRowOrColumnID", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string LeftRowOrColumnID
		{
			get
			{
				return this._LeftRowOrColumnID;
			}
			set
			{
				if ((this._LeftRowOrColumnID != value))
				{
					this.OnLeftRowOrColumnIDChanging(value);
					this.SendPropertyChanging();
					this._LeftRowOrColumnID = value;
					this.SendPropertyChanged("LeftRowOrColumnID");
					this.OnLeftRowOrColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RightRowOrColumnID", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string RightRowOrColumnID
		{
			get
			{
				return this._RightRowOrColumnID;
			}
			set
			{
				if ((this._RightRowOrColumnID != value))
				{
					this.OnRightRowOrColumnIDChanging(value);
					this.SendPropertyChanging();
					this._RightRowOrColumnID = value;
					this.SendPropertyChanged("RightRowOrColumnID");
					this.OnRightRowOrColumnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Direction", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string Direction
		{
			get
			{
				return this._Direction;
			}
			set
			{
				if ((this._Direction != value))
				{
					this.OnDirectionChanging(value);
					this.SendPropertyChanging();
					this._Direction = value;
					this.SendPropertyChanged("Direction");
					this.OnDirectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberBlocksToMove", DbType="Int NOT NULL")]
		public int NumberBlocksToMove
		{
			get
			{
				return this._NumberBlocksToMove;
			}
			set
			{
				if ((this._NumberBlocksToMove != value))
				{
					this.OnNumberBlocksToMoveChanging(value);
					this.SendPropertyChanging();
					this._NumberBlocksToMove = value;
					this.SendPropertyChanged("NumberBlocksToMove");
					this.OnNumberBlocksToMoveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberTicksBeforeChange", DbType="Int NOT NULL")]
		public int NumberTicksBeforeChange
		{
			get
			{
				return this._NumberTicksBeforeChange;
			}
			set
			{
				if ((this._NumberTicksBeforeChange != value))
				{
					this.OnNumberTicksBeforeChangeChanging(value);
					this.SendPropertyChanging();
					this._NumberTicksBeforeChange = value;
					this.SendPropertyChanged("NumberTicksBeforeChange");
					this.OnNumberTicksBeforeChangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Algorithm_RangeMoveBlock", Storage="_Algorithm", ThisKey="AlgorithmID", OtherKey="ID", IsForeignKey=true)]
		public Algorithm Algorithm
		{
			get
			{
				return this._Algorithm.Entity;
			}
			set
			{
				Algorithm previousValue = this._Algorithm.Entity;
				if (((previousValue != value) 
							|| (this._Algorithm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Algorithm.Entity = null;
						previousValue.RangeMoveBlocks.Remove(this);
					}
					this._Algorithm.Entity = value;
					if ((value != null))
					{
						value.RangeMoveBlocks.Add(this);
						this._AlgorithmID = value.ID;
					}
					else
					{
						this._AlgorithmID = default(int);
					}
					this.SendPropertyChanged("Algorithm");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rules")]
	public partial class Rule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _DefaultBoxColor;
		
		private byte _ColorMixing;
		
		private int _MSPerTick;
		
		private int _AlgorithmID;
		
		private EntityRef<Algorithm> _Algorithm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDefaultBoxColorChanging(string value);
    partial void OnDefaultBoxColorChanged();
    partial void OnColorMixingChanging(byte value);
    partial void OnColorMixingChanged();
    partial void OnMSPerTickChanging(int value);
    partial void OnMSPerTickChanged();
    partial void OnAlgorithmIDChanging(int value);
    partial void OnAlgorithmIDChanged();
    #endregion
		
		public Rule()
		{
			this._Algorithm = default(EntityRef<Algorithm>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultBoxColor", DbType="VarChar(7) NOT NULL", CanBeNull=false)]
		public string DefaultBoxColor
		{
			get
			{
				return this._DefaultBoxColor;
			}
			set
			{
				if ((this._DefaultBoxColor != value))
				{
					this.OnDefaultBoxColorChanging(value);
					this.SendPropertyChanging();
					this._DefaultBoxColor = value;
					this.SendPropertyChanged("DefaultBoxColor");
					this.OnDefaultBoxColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorMixing", DbType="TinyInt NOT NULL")]
		public byte ColorMixing
		{
			get
			{
				return this._ColorMixing;
			}
			set
			{
				if ((this._ColorMixing != value))
				{
					this.OnColorMixingChanging(value);
					this.SendPropertyChanging();
					this._ColorMixing = value;
					this.SendPropertyChanged("ColorMixing");
					this.OnColorMixingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MSPerTick", DbType="Int NOT NULL")]
		public int MSPerTick
		{
			get
			{
				return this._MSPerTick;
			}
			set
			{
				if ((this._MSPerTick != value))
				{
					this.OnMSPerTickChanging(value);
					this.SendPropertyChanging();
					this._MSPerTick = value;
					this.SendPropertyChanged("MSPerTick");
					this.OnMSPerTickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlgorithmID", DbType="Int NOT NULL")]
		public int AlgorithmID
		{
			get
			{
				return this._AlgorithmID;
			}
			set
			{
				if ((this._AlgorithmID != value))
				{
					if (this._Algorithm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlgorithmIDChanging(value);
					this.SendPropertyChanging();
					this._AlgorithmID = value;
					this.SendPropertyChanged("AlgorithmID");
					this.OnAlgorithmIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Algorithm_Rule", Storage="_Algorithm", ThisKey="AlgorithmID", OtherKey="ID", IsForeignKey=true)]
		public Algorithm Algorithm
		{
			get
			{
				return this._Algorithm.Entity;
			}
			set
			{
				Algorithm previousValue = this._Algorithm.Entity;
				if (((previousValue != value) 
							|| (this._Algorithm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Algorithm.Entity = null;
						previousValue.Rules.Remove(this);
					}
					this._Algorithm.Entity = value;
					if ((value != null))
					{
						value.Rules.Add(this);
						this._AlgorithmID = value.ID;
					}
					else
					{
						this._AlgorithmID = default(int);
					}
					this.SendPropertyChanged("Algorithm");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CommentBlock")]
	public partial class CommentBlock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AlgorithmID;
		
		private int _Position;
		
		private string _Comment;
		
		private EntityRef<Algorithm> _Algorithm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAlgorithmIDChanging(int value);
    partial void OnAlgorithmIDChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public CommentBlock()
		{
			this._Algorithm = default(EntityRef<Algorithm>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlgorithmID", DbType="Int NOT NULL")]
		public int AlgorithmID
		{
			get
			{
				return this._AlgorithmID;
			}
			set
			{
				if ((this._AlgorithmID != value))
				{
					if (this._Algorithm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlgorithmIDChanging(value);
					this.SendPropertyChanging();
					this._AlgorithmID = value;
					this.SendPropertyChanged("AlgorithmID");
					this.OnAlgorithmIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Algorithm_CommentBlock", Storage="_Algorithm", ThisKey="AlgorithmID", OtherKey="ID", IsForeignKey=true)]
		public Algorithm Algorithm
		{
			get
			{
				return this._Algorithm.Entity;
			}
			set
			{
				Algorithm previousValue = this._Algorithm.Entity;
				if (((previousValue != value) 
							|| (this._Algorithm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Algorithm.Entity = null;
						previousValue.CommentBlocks.Remove(this);
					}
					this._Algorithm.Entity = value;
					if ((value != null))
					{
						value.CommentBlocks.Add(this);
						this._AlgorithmID = value.ID;
					}
					else
					{
						this._AlgorithmID = default(int);
					}
					this.SendPropertyChanged("Algorithm");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
